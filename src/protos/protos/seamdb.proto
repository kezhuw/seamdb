// Copyright 2023 The SeamDB Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package seamdb;

message Uuid {
    fixed64 msb = 1;
    fixed64 lsb = 2;
}

message MessageId {
    uint64 epoch = 1;
    // Sequence for deduplication.
    uint64 sequence = 2;
}

message KeyRange {
    bytes start = 1;
    bytes end = 2;
}

message KeySpan {
    bytes key = 1;

    // Empty if this is a single key span.
    bytes end = 2;
}

message ShardSegment {
    string file = 1;
    string log = 2;
    KeyRange range = 3;
}

message ShardDepot {
    repeated ShardSegment segments = 1;
    string file = 2;
    // kafka://kafka-cluster-address/topic-name?start=1
    string log = 3;
    KeyRange range = 4;
}

enum ShardMergeBounds {
    All = 0;
    Left = 1;
    Right = 2;
    None = 3;
}

// range/range1_end_key ==> ShardDescriptor
message ShardDescriptor {
    uint64 id = 1;
    KeyRange range = 3;
    uint64 tablet_id = 4;
}

message ShardDescription {
    uint64 id = 1;
    KeyRange range = 3;
    repeated ShardSegment segments = 4;

    // Default to All.
    ShardMergeBounds merge_bounds = 5;
}

// system/tablets/deployments/id1 ==> deployment1
message TabletDeployment {
    uint64 id = 1;
    // Increment on leader change.
    uint64 epoch = 2;
    // Increment on not-leader change and reset on leader change.
    uint64 generation = 3;
    repeated string servers = 4;
}

message TabletDescriptor {
    uint64 id = 1;
    uint64 generation = 2;
    string manifest_log = 4;
}

message TabletDescription {
    uint64 id = 1;
    uint64 generation = 2;
    // sort by range
    repeated ShardDescription shards = 3;
    string data_log = 4;
}

message TabletManifest {
    TabletDescription tablet = 1;
    repeated TabletDescriptor splits = 2;

    TabletWatermark watermark = 5;

    // Empty logs and files for future usage.
    repeated string empty_logs = 30;
    repeated string empty_files = 31;

    // Dirty logs and files from previous runs. We are uncertain about their
    // states, so we are going to delete them in future.
    repeated string dirty_logs = 32;
    repeated string dirty_files = 33;

    repeated string obsoleted_logs = 34;
    repeated string obsoleted_files = 35;
}

message Timestamp {
    uint64 seconds = 1;
    uint32 nanoseconds = 2;
    uint32 logical = 3;
}

message Value {
    oneof value {
        int64 int = 1;
        double float = 2;
        bytes bytes = 3;
        string string = 4;
    }
}

enum ValueType {
    Absent = 0;
    Int = 1;
    Float = 2;
    Bytes = 3;
    String = 4;
}

message TimestampedValue {
    Value value = 1;
    Timestamp timestamp = 2;
}

message TimestampedKeyValue {
    Timestamp timestamp = 1;
    bytes key = 2;
    Value value = 3;
}

message KeyValue {
    bytes key = 1;
    // Tombstone if empty.
    Value value = 2;
}

message Transient {
    oneof value {
        Timestamp timestamp = 1;
        TxnMeta transaction = 2;
    }
}

message Temporal {
    oneof value {
        Timestamp timestamp = 1;
        Transaction transaction = 2;
    }
}

message Write {
    bytes key = 1;

    // Tombstone if empty.
    Value value = 2;

    uint32 sequence = 3;
}

message Batch {
    repeated Write writes = 2;
}

message TabletServerAssignment {
    uint64 generation = 1;
    repeated string servers = 2;
}

message ManifestMessage {
    uint64 epoch = 1;

    uint64 sequence = 2;

    TabletManifest manifest = 3;
}

message DataMessage {
    uint64 epoch = 1;

    // Sequence for deduplication.
    uint64 sequence = 2;

    Temporal temporal = 3;

    // None for epoch update.
    oneof operation {
        Write write = 4;
        Batch batch = 5;
    }

    Timestamp closed_timestamp = 6;
    Timestamp leader_expiration = 7;
}

message SequenceRange {
    uint32 start = 1;
    uint32 end = 2;
}

// Unique priority: priority, start_ts, id
message TxnMeta {
    Uuid id = 1;

    // Tablet locating key where this txn record resides in.
    bytes key = 2;

    // Increment on transaction restart.
    //
    // Changes:
    // 1. Increments on client initiating transaction restart.
    // 2. Increments on server transaction restart due to priority/deadlock reason.
    uint32 epoch = 3;

    // Timestamp at which point this transaction was created and got timestamp assigned.
    //
    // This is required as writes of transaction record and data records are parallel.
    // In transaction query, it is agnostic whether transaction record has been written.
    //
    // * In query, node use this timestamp to decide whether this transaction is aborted or
    //   has not been created yet.
    // * In creation, node use this timestamp to decide whether this transaction is able to create.
    //
    // This field must never be changed after assigned.
    Timestamp start_ts = 5;

    int32 priority = 6;
}

message Transaction {
    TxnMeta meta = 1;

    TxnStatus status = 3;

    // Timestamp at which point this transaction is trying to read and write.
    //
    // Fallback to start_ts if zero.
    Timestamp commit_ts = 6;

    // Only set and piggybacked from locating tablet.
    Timestamp heartbeat_ts = 7;

    // Assistant field for local usage.
    repeated KeySpan write_set = 8;

    // Commit set to resolve in txn abortion and commitment.
    //
    // Changes:
    // 1. Sets in client initiating abortion or commitment, must contain all changes in latest epoch.
    // 2. Cleared after all write set resolved so replayer knowns that.
    // 3. Piggybacked resolved ranges.
    repeated KeySpan commit_set = 9;

    // Piggybacked resolved set for txn abortion and commitment.
    repeated KeySpan resolved_set = 10;

    // Rollbacked sequences due to savepoint and partial restart/retry.
    //
    // Changes:
    // 1. Appends new sequence range.
    // 2. Extends last sequence range's `end`.
    // 3. Clears on epoch bump.
    repeated SequenceRange rollbacked_sequences = 11;
}

message TabletDeployRequest {
    TabletDeployment deployment = 1;
}

message TabletDeployResponse {
    repeated TabletDeployment deployments = 1;
}

message TabletWatermark {
    MessageId cursor = 1;
    Timestamp closed_timestamp = 3;
    Timestamp leader_expiration = 4;
}

message TabletListResponse {
    repeated TabletDeployment deployments = 1;
}

// cluster/descriptor
message ClusterDescriptor {
    string name = 1;

    uint64 generation = 2;
    Timestamp timestamp = 3;
    string manifest_log = 5;

    repeated string bootstrap_logs = 6;
    repeated string obsoleted_logs = 7;
}

message DataRequest {
    oneof request {
        GetRequest get = 1;
        PutRequest put = 2;
        IncrementRequest increment = 3;
        FindRequest find = 4;
        ScanRequest scan = 6;
        RefreshReadRequest refresh_read = 5;
    }
}

message ShardRequest {
    uint64 shard_id = 1;
    DataRequest request = 2;
}

message ShardResponse {
    ShardDescriptor shard = 1;
    DataResponse response = 2;
}

message DataResponse {
    oneof response {
        GetResponse get = 1;
        PutResponse put = 2;
        IncrementResponse increment = 3;
        FindResponse find = 4;
        ScanResponse scan = 6;
        RefreshReadResponse refresh_read = 5;
    }
}

enum TxnStatus {
    Pending = 0;

    // Terminal status.
    //
    // Changes:
    // 1. Client aborts manually.
    // 2. Locating server eagerly aborts it if not hear within heartbeat interval.
    Aborted = 1;

    // Terminal status.
    //
    // Changes:
    // 1. Client proposes commitment to locating tablet.
    // 2. Locating tablet accepts client commitment proposal.
    //
    // Invariants:
    // 1. Never changed after accepted.
    Committed = 2;
}

message BatchRequest {
    uint64 tablet_id = 1;

    Timestamp uncertainty = 2;

    Temporal temporal = 3;

    repeated ShardRequest requests = 5;
}

message BatchResponse {
    // Updated temporal.
    Temporal temporal = 1;

    // 1. Responses to above requests.
    // 2. No responses due to txn restart or abortion. Check piggybacked temporal for sure.
    repeated ShardResponse responses = 2;

    repeated TabletDeployment deployments = 3;
}

message LocateRequest {
    // Empty for cluster deployment.
    bytes key = 1;
}

message LocateResponse {
    ShardDescriptor shard = 1;
    TabletDeployment deployment = 2;
}

message GetRequest {
    bytes key = 1;
    uint32 sequence = 2;
}

message GetResponse {
    TimestampedValue value = 1;
}

message FindRequest {
    bytes key = 1;
    uint32 sequence = 2;
}

message FindResponse {
    bytes key = 1;
    TimestampedValue value = 2;
}

message ScanRequest {
    KeyRange range = 1;
    uint32 limit = 2;
    uint32 sequence = 3;
}

message ScanResponse {
    bytes resume_key = 1;
    repeated TimestampedKeyValue rows = 2;
}

message PutRequest {
    bytes key = 1;
    Value value = 2;
    uint32 sequence = 3;

    // None => put anyway
    // Some(Timestamp::default()) => put if absent
    // Some(ts) => put if ts is newest(not tombstone)
    Timestamp expect_ts= 4;
}

message PutResponse {
    Timestamp write_ts = 1;
}

message IncrementRequest {
    bytes key = 1;
    int64 increment = 2;
    uint32 sequence = 3;
}

message IncrementResponse {
    int64 value = 1;
}

// Bump read timestamp.
message RefreshReadRequest {
    KeySpan span = 1;
    Timestamp from = 2;
}

message RefreshReadResponse {
    // Empty if full span refreshed.
    bytes resume_key = 1;
}

message ParticipateTxnRequest {
    Transaction txn = 1;
    repeated TxnMeta dependents = 2;
}

message ParticipateTxnResponse {
    Transaction txn = 1;
    repeated TxnMeta dependents = 2;
}

message TabletHeartbeatRequest {
    uint64 tablet_id = 1;
}

message TabletHeartbeatResponse {
    TabletDeployment deployment = 1;
}

service TabletService {
    rpc DeployTablet(TabletDeployRequest) returns (TabletDeployResponse);

    rpc HeartbeatTablet(TabletHeartbeatRequest) returns (TabletHeartbeatResponse);

    rpc Batch(BatchRequest) returns (BatchResponse);

    rpc ParticipateTxn(stream ParticipateTxnRequest) returns (stream ParticipateTxnResponse);

    rpc Locate(LocateRequest) returns (LocateResponse);
}

message BatchError {
    optional uint32 request_index = 1;
    DataError error = 2;
}

message DataError {
    oneof error {
        ConflictWriteError conflict_write = 1;
        DataTypeMismatchError mismatch_data_type = 2;
        ShardNotFoundError shard_not_found = 3;
        TimestampMismatchError timestamp_mismatch = 4;
        StoreError store = 5;
        SimpleError internal = 6;
    }
}

message ConflictWriteError {
    bytes key = 1;
    Transient transient = 2;
}

message DataTypeMismatchError {
    bytes key = 1;
    ValueType expect = 2;
    ValueType actual = 3;
}

message TimestampMismatchError {
    bytes key = 1;
    Timestamp actual = 2;
}

message ShardNotFoundError {
    bytes key = 1;
    uint64 shard_id = 2;
}

message StoreError {
    string message = 1;
}

message SimpleError {
    string message = 1;
}

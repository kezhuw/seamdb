// Copyright 2023 The SeamDB Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package seamdb;

message MessageId {
    uint64 epoch = 1;
    // Sequence for deduplication.
    uint64 sequence = 2;
}

message KeyRange {
    bytes start = 1;
    bytes end = 2;
}

message ShardSegment {
    string file = 1;
    string log = 2;
    KeyRange range = 3;
}

message ShardDepot {
    repeated ShardSegment segments = 1;
    string file = 2;
    // kafka://kafka-cluster-address/topic-name?start=1
    string log = 3;
    KeyRange range = 4;
}

enum ShardMergeBounds {
    All = 0;
    Left = 1;
    Right = 2;
    None = 3;
}

// range/range1_end_key ==> ShardDescriptor
message ShardDescriptor {
    uint64 id = 1;
    // Increment on each split/merge.
    //
    // XXX: What if a query arrive after range split ?
    uint64 generation = 2;
    KeyRange range = 3;
    uint64 tablet_id = 4;
}

message ShardDescription {
    uint64 id = 1;
    uint64 generation = 2;
    KeyRange range = 3;
    repeated ShardSegment segments = 4;

    // Default to All.
    ShardMergeBounds merge_bounds = 5;
}

// system/tablets/deployments/id1 ==> deployment1
message TabletDeployment {
    uint64 id = 1;
    // Increment on leader change.
    uint64 epoch = 2;
    // Increment on not-leader change and reset on leader change.
    uint64 generation = 3;
    repeated string servers = 4;
}

message TabletDescriptor {
    uint64 id = 1;
    uint64 generation = 2;
    string manifest_log = 4;
}

message TabletDescription {
    uint64 id = 1;
    uint64 generation = 2;
    // sort by range
    repeated ShardDescription shards = 3;
    string data_log = 4;
}

message TabletManifest {
    TabletDescription tablet = 1;
    repeated TabletDescriptor splits = 2;

    TabletWatermark watermark = 5;

    // Empty logs and files for future usage.
    repeated string empty_logs = 30;
    repeated string empty_files = 31;

    // Dirty logs and files from previous runs. We are uncertain about their
    // states, so we are going to delete them in future.
    repeated string dirty_logs = 32;
    repeated string dirty_files = 33;

    repeated string obsoleted_logs = 34;
    repeated string obsoleted_files = 35;
}

message Timestamp {
    uint64 seconds = 1;
    uint32 nanoseconds = 2;
    uint32 logical = 3;
}

message Value {
    oneof value {
        int64 int = 1;
        double float = 2;
        bytes bytes = 3;
        string string = 4;
    }
}

message TimestampedValue {
    Value value = 1;
    Timestamp timestamp = 2;
}

message KeyValue {
    bytes key = 1;
    // Tombstone if empty.
    Value value = 2;
}

message Temporal {
    oneof value {
        Timestamp timestamp = 1;
        Transaction transaction = 2;
    }
}

message Write {
    bytes key = 1;

    // Tombstone if empty.
    Value value = 2;

    uint32 sequence = 3;
}

message Batch {
    repeated Write writes = 2;
}

message TabletServerAssignment {
    uint64 generation = 1;
    repeated string servers = 2;
}

message ManifestMessage {
    uint64 epoch = 1;

    uint64 sequence = 2;

    TabletManifest manifest = 3;
}

message DataMessage {
    uint64 epoch = 1;

    // Sequence for deduplication.
    uint64 sequence = 2;

    Temporal temporal = 3;

    // None for epoch update.
    oneof operation {
        Write write = 4;
        Batch batch = 5;
    }

    Timestamp closed_timestamp = 6;
    Timestamp leader_expiration = 7;
}

message Transaction {
    bytes id = 1;

    // Tablet locating key where this txn record resides in.
    bytes key = 2;

    // Increase on restart.
    uint32 epoch = 3;

    // Increase on write.
    uint32 sequence = 4;

    Timestamp create_ts = 5;

    // Default to create_ts if not pushed forward.
    Timestamp commit_ts = 6;

    TxnStatus status = 7;

    // Write set to resolve in txn commitment.
    repeated WriteSpan write_set = 8;

    // Milliseconds that transaction read will fence write.
    uint32 fence_duration = 10;
}

message TxnRecord {
    bytes id = 1;

    // Tablet locating key where this txn record resides in.
    bytes key = 2;

    // Increment on transaction restart.
    uint32 epoch = 3;

    // Timestamp at which point this transaction was created and got timestamp assigned.
    //
    // This is required as writes of transaction record and data records are parallel.
    // In transaction query, it is agnostic whether transaction record has been written.
    //
    // * In query, node use this timestamp to decide whether this transaction is aborted or
    //   has not been created yet.
    // * In creation, node use this timestamp to decide whether this transaction is able to create.
    //
    // This field should never be changed after assigned.
    Timestamp create_ts = 5;

    // Timestamp at which point this transaction was considered as committed or aborted.
    //
    // Fallback to create_ts if None.
    Timestamp commit_ts = 6;

    TxnStatus status = 7;

    repeated WriteSpan write_set = 8;

    Timestamp heartbeat_ts = 9;
}

message TxnMeta {
    bytes id = 1;

    // Tablet locating key where this txn record resides in.
    bytes key = 2;

    // Increment on transaction restart.
    uint32 epoch = 3;

    // Increase on write.
    uint32 sequence = 4;

    // Timestamp at which point this transaction was created and got timestamp assigned.
    //
    // This is required as writes of transaction record and data records are parallel.
    // In transaction query, it is agnostic whether transaction record has been written.
    //
    // * In query, node use this timestamp to decide whether this transaction is aborted or
    //   has not been created yet.
    // * In creation, node use this timestamp to decide whether this transaction is able to create.
    //
    // This field should never be changed after assigned.
    Timestamp create_ts = 5;

    // Timestamp at which point this transaction was considered as committed or aborted.
    //
    // Fallback to create_ts if None.
    Timestamp commit_ts = 6;
}

message TxnIntent {
    TxnMeta txn = 1;

    Value value = 2;

    message Intent {
        Value value = 1;

        // Sequence of this intent.
        uint32 sequence = 2;
    }

    repeated Intent history = 4;
}

message TabletDeployRequest {
    TabletDeployment deployment = 1;
}

message TabletDeployResponse {
    repeated TabletDeployment deployments = 1;
}

message TabletWatermark {
    MessageId cursor = 1;
    Timestamp closed_timestamp = 3;
    Timestamp leader_expiration = 4;
}

message TabletListResponse {
    repeated TabletDeployment deployments = 1;
}

// cluster/descriptor
message ClusterDescriptor {
    string name = 1;

    uint64 generation = 2;
    Timestamp timestamp = 3;
    string manifest_log = 5;

    repeated string bootstrap_logs = 6;
    repeated string obsoleted_logs = 7;
}

message DataRequest {
    oneof request {
        GetRequest get = 1;
        PutRequest put = 2;
        IncrementRequest increment = 3;
        FindRequest find = 4;
    }
}

message DataResponse {
    oneof response {
        GetResponse get = 1;
        PutResponse put = 2;
        IncrementResponse increment = 3;
        FindResponse find = 4;
    }
}

message WriteSpan {
    bytes key = 1;
    bytes end_key = 2;
}

enum TxnStatus {
    Pending = 0;
    Committed = 1;
    Aborted = 2;
}

message BatchRequest {
    uint64 tablet_id = 1;

    Timestamp uncertainty = 2;

    // An atomic transactional batch request could be committed in one phase.
    // This means that all writes resides in one tablet.
    bool atomic = 6;

    Temporal temporal = 3;

    repeated uint64 shards = 4;
    repeated DataRequest requests = 5;
}

message BatchResponse {
    // Pushed timestamp.
    Timestamp timestamp = 1;

    repeated DataResponse responses = 2;

    repeated TabletDeployment deployments = 3;
}

message LocateRequest {
    // Empty for cluster deployment.
    bytes key = 1;
}

message LocateResponse {
    ShardDescriptor shard = 1;
    TabletDeployment deployment = 2;
}

message GetRequest {
    bytes key = 1;
    uint32 sequence = 2;
}

message GetResponse {
    TimestampedValue value = 1;
}

message FindRequest {
    bytes key = 1;
    uint32 sequence = 2;
}

message FindResponse {
    bytes key = 1;
    TimestampedValue value = 2;
}

message PutRequest {
    bytes key = 1;
    Value value = 2;
    uint32 sequence = 3;

    // None => put anyway
    // Some(Timestamp::default()) => put if absent
    // Some(ts) => put if ts is newest(not tombstone)
    Timestamp expect_ts= 4;
}

message PutResponse {
    Timestamp write_ts = 1;
}

message IncrementRequest {
    bytes key = 1;
    int64 increment = 2;
    uint32 sequence = 3;
}

message IncrementResponse {
    int64 value = 1;
}

message TabletHeartbeatRequest {
    uint64 tablet_id = 1;
}

message TabletHeartbeatResponse {
    TabletDeployment deployment = 1;
}

service TabletService {
    rpc DeployTablet(TabletDeployRequest) returns (TabletDeployResponse);

    rpc HeartbeatTablet(TabletHeartbeatRequest) returns (TabletHeartbeatResponse);

    rpc Batch(BatchRequest) returns (BatchResponse);

    rpc Locate(LocateRequest) returns (LocateResponse);
}

// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DescriptorMeta {
    #[prost(uint64, tag = "1")]
    pub id: u64,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub database_id: u64,
    #[prost(uint64, tag = "4")]
    pub parent_id: u64,
    #[prost(message, required, tag = "5")]
    pub timestamp: super::seamdb::Timestamp,
    #[prost(bytes = "vec", tag = "6")]
    pub blob: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DatabaseDescriptor {
    #[prost(uint64, tag = "1")]
    pub id: u64,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// Populated from kv layer.
    #[prost(message, required, tag = "3")]
    pub timestamp: super::seamdb::Timestamp,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SchemaDescriptor {
    #[prost(uint64, tag = "1")]
    pub id: u64,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub database_id: u64,
    /// Populated from kv layer.
    #[prost(message, required, tag = "4")]
    pub timestamp: super::seamdb::Timestamp,
}
#[derive(Eq, Hash, PartialOrd)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TableDescriptor {
    #[prost(uint64, tag = "1")]
    pub id: u64,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub database_id: u64,
    #[prost(uint64, tag = "4")]
    pub schema_id: u64,
    /// Populated from kv layer.
    #[prost(message, required, tag = "5")]
    pub timestamp: super::seamdb::Timestamp,
    #[prost(uint32, tag = "7")]
    pub last_column_id: u32,
    #[prost(message, repeated, tag = "8")]
    pub columns: ::prost::alloc::vec::Vec<ColumnDescriptor>,
    #[prost(uint32, tag = "9")]
    pub last_index_id: u32,
    #[prost(message, repeated, tag = "10")]
    pub indices: ::prost::alloc::vec::Vec<IndexDescriptor>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ColumnType {
    #[prost(enumeration = "!ColumnTypeKind", tag = "1")]
    pub kind: ColumnTypeKind,
    #[prost(message, optional, tag = "2")]
    pub declaration: ::core::option::Option<ColumnTypeDeclaration>,
}
#[derive(Eq, Hash, PartialOrd)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NumericTypeDeclaration {
    #[prost(uint32, tag = "1")]
    pub precision: u32,
    #[prost(uint32, tag = "2")]
    pub scale: u32,
}
#[derive(Eq, Hash, PartialOrd)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CharacterTypeDeclaration {
    #[prost(uint32, tag = "1")]
    pub max_length: u32,
}
#[derive(Eq, Hash, PartialOrd)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub enum ColumnTypeDeclaration {
    #[prost(message, tag = "1")]
    Numeric(NumericTypeDeclaration),
    #[prost(message, tag = "2")]
    Character(CharacterTypeDeclaration),
}
#[derive(PartialOrd)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StoringFloat32 {
    #[prost(float, tag = "1")]
    pub value: f32,
}
#[derive(PartialOrd)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StoringFloat64 {
    #[prost(double, tag = "1")]
    pub value: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Column {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(message, optional, tag = "2")]
    pub value: ::core::option::Option<ColumnValue>,
}
#[derive(Eq, Hash, PartialOrd)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub enum ColumnValue {
    #[prost(bool, tag = "1")]
    Boolean(bool),
    #[prost(int32, tag = "2")]
    Int16(i32),
    #[prost(int32, tag = "3")]
    Int32(i32),
    #[prost(int64, tag = "4")]
    Int64(i64),
    #[prost(message, tag = "5")]
    Float32(StoringFloat32),
    #[prost(message, tag = "6")]
    Float64(StoringFloat64),
    #[prost(bytes, tag = "7")]
    Bytes(::prost::alloc::vec::Vec<u8>),
    #[prost(string, tag = "8")]
    String(::prost::alloc::string::String),
}
#[derive(Eq, Hash, PartialOrd)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ColumnDescriptor {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub nullable: bool,
    #[prost(bool, tag = "4")]
    pub serial: bool,
    #[prost(enumeration = "!ColumnTypeKind", tag = "5")]
    pub type_kind: ColumnTypeKind,
    #[prost(message, optional, tag = "6")]
    pub type_declaration: ::core::option::Option<ColumnTypeDeclaration>,
    #[prost(message, optional, tag = "7")]
    pub default_value: ::core::option::Option<ColumnValue>,
}
#[derive(Eq, Hash, PartialOrd)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IndexDescriptor {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(enumeration = "!IndexKind", tag = "3")]
    pub kind: IndexKind,
    /// Declared index columns.
    #[prost(uint32, repeated, tag = "4")]
    pub column_ids: ::prost::alloc::vec::Vec<u32>,
    /// Declared storing columns,
    #[prost(uint32, repeated, tag = "5")]
    pub storing_column_ids: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ColumnTypeKind {
    Boolean = 0,
    Int16 = 1,
    Int32 = 2,
    Int64 = 3,
    Float32 = 4,
    Float64 = 5,
    Bytes = 6,
    String = 7,
}
impl ColumnTypeKind {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ColumnTypeKind::Boolean => "Boolean",
            ColumnTypeKind::Int16 => "Int16",
            ColumnTypeKind::Int32 => "Int32",
            ColumnTypeKind::Int64 => "Int64",
            ColumnTypeKind::Float32 => "Float32",
            ColumnTypeKind::Float64 => "Float64",
            ColumnTypeKind::Bytes => "Bytes",
            ColumnTypeKind::String => "String",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Boolean" => Some(Self::Boolean),
            "Int16" => Some(Self::Int16),
            "Int32" => Some(Self::Int32),
            "Int64" => Some(Self::Int64),
            "Float32" => Some(Self::Float32),
            "Float64" => Some(Self::Float64),
            "Bytes" => Some(Self::Bytes),
            "String" => Some(Self::String),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum IndexKind {
    NotUnique = 0,
    UniqueNullsDistinct = 1,
    UniqueNullsNotDistinct = 2,
    PrimaryKey = 3,
}
impl IndexKind {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            IndexKind::NotUnique => "NotUnique",
            IndexKind::UniqueNullsDistinct => "UNIQUE_NULLS_DISTINCT",
            IndexKind::UniqueNullsNotDistinct => "UNIQUE_NULLS_NOT_DISTINCT",
            IndexKind::PrimaryKey => "PRIMARY_KEY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NotUnique" => Some(Self::NotUnique),
            "UNIQUE_NULLS_DISTINCT" => Some(Self::UniqueNullsDistinct),
            "UNIQUE_NULLS_NOT_DISTINCT" => Some(Self::UniqueNullsNotDistinct),
            "PRIMARY_KEY" => Some(Self::PrimaryKey),
            _ => None,
        }
    }
}
